apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nussknacker.fullname" . }}
  labels:
    {{- include "nussknacker.labels" . | nindent 4 }}
data:
  application.conf: |-

    {{- with .Values.db }}
    db: {{ tpl (toJson .) $ }}
    {{- end }}
    db.password: ${?DB_PASSWORD}

    scenarioTypes {
    {{- if .Values.nussknacker.useDefaultScenarioType }}
    {{- if .Values.nussknacker.streaming.enabled }}
      "streaming": {
          category: "Default"
          {{- if eq .Values.nussknacker.mode "flink" }}
          deploymentConfig: {
             type: "flinkStreaming"
             {{- /* Find easier way of passing it through values */}}
             restUrl: "{{ include "nussknacker.flinkJobManagerUrl" . }}"
          } {{ tpl (.Values.nussknacker.flinkConfig | mustToJson) . }}
          {{- else if eq .Values.nussknacker.mode "flink-k8s-operator" }}
          deploymentConfig: {
            type: "flink-k8s-operator"
            k8sNamespace: {{ template "nussknacker.namespace" . }}
            {{- if .Values.flinkK8sOperatorDeploymentManager.limitOfRunningScenarios }}
            limitOfRunningScenarios: {{ .Values.flinkK8sOperatorDeploymentManager.limitOfRunningScenarios }}
            {{- end }}
            {{- if .Values.flinkK8sOperatorDeploymentManager.customLimitOfRunningScenarioExceededMessage }}
            customLimitOfRunningScenarioExceededMessage: {{ .Values.flinkK8sOperatorDeploymentManager.customLimitOfRunningScenarioExceededMessage | quote }}
            {{- end }}
            flinkVersion: {{ .Values.flinkK8sOperatorDeploymentManager.flinkVersion | quote }}
            jobJarStoragePVCName: {{ .Values.flinkK8sOperatorDeploymentManager.jobJarStorage.pvcName | quote }}
            jobJarStorageMountPoint: {{ .Values.flinkK8sOperatorDeploymentManager.jobJarStorage.mountPoint | quote }}            
            jobStateStoragePVCName: {{ .Values.flinkK8sOperatorDeploymentManager.jobStateStorage.pvcName | quote }}
            jobStateStorageMountPoint: {{ .Values.flinkK8sOperatorDeploymentManager.jobStateStorage.mountPoint | quote }}
            {{- if .Values.flinkK8sOperatorDeploymentManager.numberOfTaskSlotsInTaskManager }}
            numberOfTaskSlotsInTaskManager: {{ .Values.flinkK8sOperatorDeploymentManager.numberOfTaskSlotsInTaskManager }}
            {{- end }}
            {{- if .Values.flinkK8sOperatorDeploymentManager.jobParallelism }}
            jobParallelism: {{ .Values.flinkK8sOperatorDeploymentManager.jobParallelism }}
            {{- end }}
            {{- if .Values.flinkK8sOperatorDeploymentManager.jobUpgradeMode }}
            jobUpgradeMode: {{ .Values.flinkK8sOperatorDeploymentManager.jobUpgradeMode | quote }}
            {{- end }}
            {{- if .Values.flinkK8sOperatorDeploymentManager.allowNonRestoredState }}
            allowNonRestoredState: {{ .Values.flinkK8sOperatorDeploymentManager.allowNonRestoredState }}
            {{- end }}
            {{- if .Values.flinkK8sOperatorDeploymentManager.jobManagerMemory }}
            jobManagerMemory: {{ .Values.flinkK8sOperatorDeploymentManager.jobManagerMemory | quote }}
            {{- end }}
            {{- if .Values.flinkK8sOperatorDeploymentManager.jobManagerCpu }}
            jobManagerCpu: {{ .Values.flinkK8sOperatorDeploymentManager.jobManagerCpu }}
            {{- end }}
            {{- if .Values.flinkK8sOperatorDeploymentManager.taskManagerMemory }}
            taskManagerMemory: {{ .Values.flinkK8sOperatorDeploymentManager.taskManagerMemory | quote }}
            {{- end }}
            {{- if .Values.flinkK8sOperatorDeploymentManager.taskManagerCpu }}
            taskManagerCpu: {{ .Values.flinkK8sOperatorDeploymentManager.taskManagerCpu }}
            {{- end }}
            {{- if .Values.flinkK8sOperatorDeploymentManager.taskManagerReplicas }}
            taskManagerReplicas: {{ .Values.flinkK8sOperatorDeploymentManager.taskManagerReplicas | quote }}
            {{- end }}
          }
          {{- else if eq .Values.nussknacker.mode "ververica" }}
          deploymentConfig: {
              type: "ververica"
              username: {{ .Values.nussknacker.ververica.username | quote }}
              password: {{ .Values.nussknacker.ververica.password | quote }}
              remoteSyslogIp: {{ .Values.nussknacker.ververica.remoteSyslogIp | quote }}
              remoteSyslogPort: {{ .Values.nussknacker.ververica.remoteSyslogPort }}
              engineVersion: {{ .Values.nussknacker.ververica.engineVersion | quote }}
          }
          {{- else if eq .Values.nussknacker.mode "lite-k8s" }}
          deploymentConfig: {
             type: "lite-k8s"
             mode: "streaming"
             {{- if .Values.nussknacker.k8sDeploymentConfig }}
             k8sDeploymentConfig: {{- tpl ( mustToJson .Values.nussknacker.k8sDeploymentConfig ) . }}
             {{- end }}
             {{- if .Values.nussknacker.runtimeImage }}
             dockerImageName: {{- .Values.nussknacker.runtimeImage.repository }}
             dockerImageTag: {{- .Values.nussknacker.runtimeImage.tag }}
             {{- end }}
             {{- if .Values.prometheusMetrics.enabled }}
             prometheusMetrics: {
                enabled: true
                port: {{ .Values.prometheusMetrics.port }}
             }
             {{- end }}
             {{- if .Values.nussknacker.scalingConfig }}
             scalingConfig: {{- tpl ( mustToJson .Values.nussknacker.scalingConfig  ) . }}
             {{- end }}
             nussknackerInstanceName: ${?HELM_RELEASE_NAME}
             logbackConfigPath: ${?RUNTIME_LOGBACK_FILE}
             {{- with .Values.runtimeCommonConfigMapForLogback }}
             commonConfigMapForLogback: {{ . }}
             {{- end }}
             configExecutionOverrides: {
               {{- if .Values.influxdb.enabled }}
               metrics {
                 environment: ${environment},
                 influx {
                   url: "{{ include "nussknacker.influxUrl" .}}/write",
                   database: "nussknacker"
                   username: ${INFLUXDB_USER}
                   password: ${INFLUXDB_PASSWORD}
                 }
               }
               {{- end }}
             }{{- tpl ( mustToJson .Values.nussknacker.configExecutionOverrides ) . }}
          }
          {{- end }}

          modelConfig: {
            classPath: {{ include "nussknacker.streaming.modelClassPath" . }}
            {{- if and (eq .Values.nussknacker.mode "flink") (not .Values.nussknacker.skipKafkaConfig ) }}
            components.kafka.config {
              kafkaProperties {
                "bootstrap.servers": "{{ include "nussknacker.kafkaBootstrapServers" . }}"
                "schema.registry.url": "{{ include "nussknacker.schemaRegistryUrl" . }}"
              }
              {{- with .Values.nussknacker.schemaRegistryCacheConfig }}
              schemaRegistryCacheConfig: {{ tpl (toJson .) $ }}
              {{- end }}
            }
            rocksDB {
              enable: true
            }
            {{- else if not .Values.nussknacker.skipKafkaConfig }}
            kafka {
              kafkaProperties {
                "bootstrap.servers": "{{ include "nussknacker.kafkaBootstrapServers" . }}"
                "schema.registry.url": "{{ include "nussknacker.schemaRegistryUrl" . }}"
              }
              {{- with .Values.nussknacker.schemaRegistryCacheConfig }}
              schemaRegistryCacheConfig: {{ tpl (toJson .) $ }}
              {{- end }}
            }
            {{- end }}
          }{{- tpl ( mustToJson .Values.nussknacker.modelConfig ) . }}
      }
      {{- end }}
      {{- if and (.Values.nussknacker.requestResponse.enabled) (eq .Values.nussknacker.mode "lite-k8s") }}
      "request-response": {
          category: "Default"

          deploymentConfig: {
             type: "lite-k8s"
             mode: "request-response"
             {{- if .Values.nussknacker.k8sDeploymentConfig }}
             k8sDeploymentConfig: {{- tpl ( mustToJson .Values.nussknacker.k8sDeploymentConfig ) . }}
             {{- end }}
             {{- if .Values.nussknacker.runtimeImage }}
             dockerImageName: {{- .Values.nussknacker.runtimeImage.repository }}
             dockerImageTag: {{- .Values.nussknacker.runtimeImage.tag }}
             {{- end }}
             servicePort: {{ .Values.nussknacker.requestResponse.servicePort }}
             {{- if .Values.nussknacker.requestResponse.ingress.enabled }}
             ingress: {{- tpl ( mustToJson .Values.nussknacker.requestResponse.ingress ) . }}
             {{- end }}
             {{- if .Values.prometheusMetrics.enabled }}
             prometheusMetrics: {
                enabled: true
                port: {{ .Values.prometheusMetrics.port }}
             }
             {{- end }}
             {{- if .Values.nussknacker.scalingConfig }}
             scalingConfig: {{- tpl ( mustToJson .Values.nussknacker.scalingConfig  ) . }}
             {{- end }}
             nussknackerInstanceName: ${?HELM_RELEASE_NAME}
             logbackConfigPath: ${?RUNTIME_LOGBACK_FILE}
             {{- with .Values.runtimeCommonConfigMapForLogback }}
             commonConfigMapForLogback: {{ . }}
             {{- end }}
             configExecutionOverrides: {
               {{- if .Values.influxdb.enabled }}
               metrics {
                 environment: ${environment},
                 influx {
                   url: "{{ include "nussknacker.influxUrl" .}}/write",
                   database: "nussknacker"
                   username: ${INFLUXDB_USER}
                   password: ${INFLUXDB_PASSWORD}
                 }
               }
               {{- end }}
             }{{- tpl ( mustToJson .Values.nussknacker.configExecutionOverrides ) . }}
          }

          modelConfig: {
            classPath: {{ include "nussknacker.requestResponse.modelClassPath" . }}
          }
      }
      {{- end }}
    {{- end }}
    }

    {{- if .Values.influxdb.enabled }}
    countsSettings: {{ include "nussknacker.influxDbConfig" .}}
    {{- end }}

    {{- if .Values.grafana.enabled }}
    metricsSettings: {
      url: "{{ include "nussknacker.grafanaUrl" .}}/d/$dashboard?theme=dark&var-scenarioName=$scenarioName&var-env="${environment}
      defaultDashboard: ""
      scenarioTypeToDashboard: {
        {{- if .Values.nussknacker.streaming.enabled }}
        "streaming": "{{ include "nussknacker.streaming.dashboard" .}}"
        {{- end }}
        {{- if and (.Values.nussknacker.requestResponse.enabled) (eq .Values.nussknacker.mode "lite-k8s") }}
        "request-response": "{{ .Values.nussknacker.requestResponse.dashboard }}"
        {{- end }}
      }
    }
    {{- end }}

    tabs: ${tabs} {{- tpl ( mustToJson (.Values.nussknacker.customTabs | default list) ) . }}

    usageStatisticsReports {
      enabled: {{- .Values.nussknacker.usageStatisticsReports }}
      fingerprint: "{{- .Values.nussknacker.usageStatisticsReportsFingerprint }}"
      source: "{{- .Values.nussknacker.usageStatisticsReportsSource }}"
    }

    {{- if .Values.nussknacker.authentication }}
    authentication: {{- tpl ( mustToJson .Values.nussknacker.authentication ) . }}
    {{- end }}

    {{- /* We have to iterate over first level of passed uiConfig to embed in .conf properly...  */}}
    {{- range $key, $val := .Values.nussknacker.uiConfig }}
    {{ $key }}: {{ tpl ( mustToJson $val ) $ }}
    {{- end }}
