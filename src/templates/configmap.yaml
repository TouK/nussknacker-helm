apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nussknacker.fullname" . }}
  labels:
    {{- include "nussknacker.labels" . | nindent 4 }}
data:
  application.conf: |-

    {{- with .Values.db }}
    db: {{ tpl (toJson .) $ }}
    {{- end }}
    db.password: ${?DB_PASSWORD}

    scenarioTypes {
      "default": {
          {{- if eq .Values.nussknacker.mode "flink" }}
          deploymentConfig: {
             type: "flinkStreaming"
             {{/* Find easier way of passing it through values */}}
             restUrl: "{{ include "nussknacker.flinkJobManagerUrl" . }}"
             queryableStateProxyUrl: "{{ include "nussknacker.flinkTaskManagerUrl" . }}"
          } {{ tpl (.Values.nussknacker.flinkConfig | mustToJson) . }}

          {{- else if eq .Values.nussknacker.mode "streaming-lite" }}
          deploymentConfig: {
             type: "streaming-lite-k8s"
             k8sDeploymentConfig:{
               spec.template.spec.containers: [
                  {
                    "env" : [
                      {
                        "name" : "CONFIG_FORCE_nussknacker_modelConfig_components_openAPI_security_apikey_apiKeyValue",
                        "valueFrom" : {
                          "secretKeyRef" : {
                            "key" : "OPEN_API_KEY",
                            "name" : "sec-nu-designer"
                          }
                        }
                      }
                    ],
                    "name" : "runtime",
                    "image" : "touk/nussknacker-lite-kafka-runtime:1.3.0-staging-2022-01-27-6585-b188dcbb4415d733b0029bac34792919ccf20a43-SNAPSHOT"
                  }
                ]
             }
             {{- if .Values.nussknacker.runtimeImage }}
             dockerImageName: {{- .Values.nussknacker.runtimeImage.repository }}
             dockerImageTag: {{- .Values.nussknacker.runtimeImage.tag }}
             {{- end }}
             nussknackerInstanceName: ${?HELM_RELEASE_NAME}
             configExecutionOverrides {
               {{- if .Values.influxdb.enabled }}
               metrics {
                 environment: ${environment},
                 influx {
                   url: "{{ include "nussknacker.influxUrl" .}}/write",
                   database: "nussknacker"
                 }
               }
               {{- end }}
             }
          }
          {{- end }}

          modelConfig: {
            classPath: {{ include "nussknacker.modelClassPath" . }}
            {{- if eq .Values.nussknacker.mode "flink" }}
            components.kafka.config {
              kafkaAddress: "{{ include "nussknacker.kafkaBootstrapServers" . }}"
              kafkaProperties {
                "schema.registry.url": "{{ include "nussknacker.schemaRegistryUrl" . }}"
              }
            }
            rocksDB {
              enable: true
            }
            {{- else if eq .Values.nussknacker.mode "streaming-lite" }}
            kafka {
              kafkaAddress: "{{ include "nussknacker.kafkaBootstrapServers" . }}"
              kafkaProperties {
                "schema.registry.url": "{{ include "nussknacker.schemaRegistryUrl" . }}"
              }
            }
            {{- end }}
          }{{ tpl ( mustToJson .Values.nussknacker.modelConfig ) . }}
      }
    }

    {{- if .Values.influxdb.enabled }}
    countsSettings: {{ include "nussknacker.influxDbConfig" .}}
    {{- end }}

    {{- if .Values.grafana.enabled }}
        metricsSettings: {
          url: "{{ include "nussknacker.grafanaUrl" .}}/d/$dashboard?theme=dark&var-processName=$process&var-env="${environment}
          defaultDashboard: "{{ include "nussknacker.defaultDashboard" .}}"
        }
    {{- end }}

    {{/* Find easier way of passing it through values */}}
    tabs: ${tabs} [ {{ include "nussknacker.hermesUiManagementTab" . }} ] {{ tpl ( mustToJson (.Values.nussknacker.customTabs | default list) ) . }}

    {{- if .Values.nussknacker.authentication }}
    authentication: {{ tpl ( mustToJson .Values.nussknacker.authentication ) . }}
    {{- end }}

    {{/* We have to iterate over first level of passed uiConfig to embed in .conf properly...  */}}
    {{- range $key, $val := .Values.nussknacker.uiConfig }}
      {{ $key }}: {{ tpl ( mustToJson $val ) $ }}
    {{- end }}

