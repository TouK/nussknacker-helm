apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nussknacker.fullname" . }}
  labels:
    {{- include "nussknacker.labels" . | nindent 4 }}
data:
  application.conf: |-

    {{- with .Values.db }}
    db: {{ tpl (toJson .) $ }}
    {{- end }}
    db.password: ${?DB_PASSWORD}

    scenarioTypes {
      "default": {
          {{- if eq .Values.nussknacker.mode "ververica" }}
          deploymentConfig: {
              type: "ververica"
              workspace: {{ .Values.nussknacker.workspace }}
              username: {{ .Values.nussknacker.username | quote }}
              password: {{ .Values.nussknacker.password | quote }}
              remoteSyslogIp: {{ .Values.nussknacker.remoteSyslogIp | quote }}
              remoteSyslogPort: {{ .Values.nussknacker.remoteSyslogPort }}
          }
          {{- else if eq .Values.nussknacker.mode "flink" }}
          deploymentConfig: {
             type: "flinkStreaming"
             {{- /* Find easier way of passing it through values */}}
             restUrl: "{{ include "nussknacker.flinkJobManagerUrl" . }}"
             queryableStateProxyUrl: "{{ include "nussknacker.flinkTaskManagerUrl" . }}"
          } {{ tpl (.Values.nussknacker.flinkConfig | mustToJson) . }}

          {{- else if or (eq .Values.nussknacker.mode "streaming-lite") (eq .Values.nussknacker.mode "request-response") }}
          deploymentConfig: {
             type: "lite-k8s"
             mode: {{ .Values.nussknacker.mode | replace "-lite" "" }}
             {{- if .Values.nussknacker.k8sDeploymentConfig }}
             k8sDeploymentConfig: {{- tpl ( mustToJson .Values.nussknacker.k8sDeploymentConfig ) . }}
             {{- end }}
             {{- if .Values.nussknacker.runtimeImage }}
             dockerImageName: {{- .Values.nussknacker.runtimeImage.repository }}
             dockerImageTag: {{- .Values.nussknacker.runtimeImage.tag }}
             {{- end }}
             {{- if eq .Values.nussknacker.mode "request-response" }}
             servicePort: {{ .Values.nussknacker.requestResponse.servicePort }}
             {{- if .Values.nussknacker.requestResponse.ingress.enabled }}
             ingress: {{- tpl ( mustToJson .Values.nussknacker.requestResponse.ingress ) . }}
             {{- end}}
             {{- end }}
             {{- if .Values.prometheusMetrics.enabled }}
             prometheusMetrics: {
                enabled: true
                port: {{ .Values.prometheusMetrics.port }}
             }
             {{- end }}
             {{- if .Values.nussknacker.scalingConfig }}
             scalingConfig: {{- tpl ( mustToJson .Values.nussknacker.scalingConfig  ) . }}
             {{- end }}
             nussknackerInstanceName: ${?HELM_RELEASE_NAME}
             logbackConfigPath: ${?RUNTIME_LOGBACK_FILE}
             {{- with .Values.runtimeCommonConfigMapForLogback }}
             commonConfigMapForLogback: {{ . }}
             {{- end }}
             configExecutionOverrides {
               {{- if .Values.influxdb.enabled }}
               metrics {
                 environment: ${environment},
                 influx {
                   url: "{{ include "nussknacker.influxUrl" .}}/write",
                   database: "nussknacker"
                   username: ${INFLUXDB_USER}
                   password: ${INFLUXDB_PASSWORD}
                 }
               }
               {{- end }}
             }
          }
          {{- end }}

          modelConfig: {
            classPath: {{ include "nussknacker.modelClassPath" . }}
            remoteClassPath: {{ ".Values.nussknacker.remoteClassPath" | default "[]" }}
            {{- if and (eq .Values.nussknacker.mode "flink") (not .Values.nussknacker.skipKafkaConfig ) }}
            components.kafka.config {
              kafkaProperties {
                "bootstrap.servers": "{{ include "nussknacker.kafkaBootstrapServers" . }}"
                "schema.registry.url": "{{ include "nussknacker.schemaRegistryUrl" . }}"
              }
            }
            rocksDB {
              enable: true
            }
            {{- else if and (eq .Values.nussknacker.mode "streaming-lite") (not .Values.nussknacker.skipKafkaConfig ) }}
            kafka {
              kafkaProperties {
                "bootstrap.servers": "{{ include "nussknacker.kafkaBootstrapServers" . }}"
                "schema.registry.url": "{{ include "nussknacker.schemaRegistryUrl" . }}"
              }
            }
            {{- end }}
          }{{- tpl ( mustToJson .Values.nussknacker.modelConfig ) . }}
      }
    }

    {{- if .Values.influxdb.enabled }}
    countsSettings: {{ include "nussknacker.influxDbConfig" .}}
    {{- end }}

    {{- if .Values.grafana.enabled }}
    metricsSettings: {
      url: "{{ include "nussknacker.grafanaUrl" .}}/d/$dashboard?theme=dark&var-scenarioName=$scenarioName&var-env="${environment}
      defaultDashboard: "{{ include "nussknacker.defaultDashboard" .}}"
    }
    {{- end }}

    tabs: ${tabs} {{- tpl ( mustToJson (.Values.nussknacker.customTabs | default list) ) . }}

    usageStatisticsReports {
      enabled: {{- .Values.nussknacker.usageStatisticsReports }}
      fingerprint: "{{- .Values.nussknacker.usageStatisticsReportsFingerprint }}"
      source: "{{- .Values.nussknacker.usageStatisticsReportsSource }}"
    }

    {{- if .Values.nussknacker.authentication }}
    authentication: {{- tpl ( mustToJson .Values.nussknacker.authentication ) . }}
    {{- end }}

    {{- /* We have to iterate over first level of passed uiConfig to embed in .conf properly...  */}}
    {{- range $key, $val := .Values.nussknacker.uiConfig }}
    {{ $key }}: {{ tpl ( mustToJson $val ) $ }}
    {{- end }}
