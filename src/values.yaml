# Default values for nussknacker.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: touk/nussknacker
  # By default, the tag is taken from the chart's appVersion, but you can override it with this property.
  #tag: latest
  pullPolicy: IfNotPresent

imagePullSecrets: [ ]
nameOverride: ""
fullnameOverride: ""

rbac:
  create: true
  ## Use an existing ClusterRole/Role (depending on rbac.namespaced false/true)
  # useExistingRole: name-of-some-(cluster)role

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext:
  fsGroup: 1001

securityContext:
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  runAsUser: 1001

service:
  type: ClusterIP
  port: 80
  annotations:

persistence:
  ## enable if you are using HSQLDB instead of Postgres
  enabled: false
  ## A manually managed Persistent Volume and Claim
  ## If defined, PVC must be created manually before volume will be bound
  ## The value is evaluated as a template, so, for example, the name can depend on .Release or .Chart
  # existingClaim:

  ## The subdirectory of the volume to mount to, useful in dev environments
  ## and one PV for multiple services.
  ##
  subPath: ""

  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"

  accessMode: ReadWriteOnce
  size: 1Gi
  annotations: { }

deployment:
  startupProbe:
    periodSeconds: 3
    failureThreshold: 40
    timeoutSeconds: 5
  livenessProbe:
    periodSeconds: 5
    failureThreshold: 3
    timeoutSeconds: 5

ingress:
  skipHost: false
  enabled: false
  #Set to true e.g. if you want to use https://kubernetes.github.io/ingress-nginx/user-guide/tls/#default-ssl-certificate
  skipTlsSecret: false
  # domain: <a TLD must be set>
  # host: .Release.Name-nussknacker
  # tlsSecretName: .Release.Name-nussknacker-tls
  ## Custom ingress paths for each host. This feature can be used to override the default paths
  customPaths: []
  # Example for Kubernetes > 1.19:
  # - path: /custom-path
  #   pathType: Prefix
  #   backend:
  #     service:
  #       name: custom-service
  #       port:
  #         number: 8080
  # Example for Kubernetes < 1.19:
  # - path: /custom-path
  #   backend:
  #     serviceName: custom-service
  #     servicePort: 8080

resources: { }
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: { }

tolerations: [ ]

affinity: { }

db:
  driver: "org.postgresql.Driver"
  url: 'jdbc:postgresql://{{ .Release.Name }}-postgresql/'
  schema: public
  user: postgres
  # password: from a postgresql secret via env variable (see deployment.yaml) by default

nussknacker:
  mode: "flink"
  javaOpts: ""
  #override it if you want to provide own config file and override one provided via configmap.yaml
  configFile: /etc/nussknacker/application.conf
  flinkConfig:
    jobManagerTimeout: "1m"
    #Have to be provided if Flink not enabled
    #restUrl:
    #queryableStateProxyUrl:
  modelConfig: {}
  uiConfig:
    environment: "default"
    environmentAlert:
      content: "{{ .Values.nussknacker.uiConfig.environment }}"
      color: "indicator-green"
    categoriesConfig:
      #NOTE: all categories have to point to 'default' scenarioType!
      Default: "default"
  #Use it if you want to skip default kafka configuration and provide your own    
  skipKafkaConfig: false
  usageStatisticsReports: true
  usageStatisticsReportsFingerprint: ~
  usageStatisticsReportsSource: "helmchart"
  requestResponse:
    servicePort: 80
    ingress:
      enabled: true

prometheusMetrics:
  enabled: false
  port: 9000

postgresql:
  enabled: true
  volumePermissions:
    enabled: true

zookeeper:
  enabled: true

kafka:
  enabled: true
  persistence:
    enabled: true
  kraft:
    enabled: false
  zookeeper:
    enabled: false
  externalZookeeper:
    servers:
      - "{{ .Release.Name }}-zookeeper:{{ default 2181 (.Values.zookeeper.service).ports.client }}"

apicurio-registry:
  enabled: true
  image:
    tag: 2.2.5.Final
  kafka:
    enabled: false

flink:
  enabled: true
  image:
    tag: 1.16.0-scala_2.12-java11
  flink:
    #TODO: system metrics fail on Flink 1.16
    monitoring:
      system:
        enabled: false
    #Have to override default setting from chart, as it's not compatible with Flink 1.16    
    params: "metrics.reporter.prom.factory.class: org.apache.flink.metrics.prometheus.PrometheusReporterFactory"    
  taskmanager:
    statefulset: false
    numberOfTaskSlots: 3
  jobmanager:
    statefulset: true
#  prometheus:
#    serviceMonitor:
#      enabled: false

grafana:
  enabled: true
  grafana.ini:
    server:
      root_url: "%(protocol)s://%(domain)s/grafana"
      serve_from_sub_path: true
    security:
      allow_embedding: true
    #TODO: just for demo purposes
    "auth.anonymous":
      enabled: true
  #TODO: authentication
  adminUser: admin
  adminPassword: admin
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: influx
        type: influxdb
        access: proxy
        orgId: 1
        url: "http://nussknacker-influxdb:8086"
        database: nussknacker
        basicAuth: true
        isDefault: true
        version: 1
        editable: false
        basicAuthUser: user
        secureJsonData:
          basicAuthPassword: pass
  dashboards:
    default:
      dashboard:
        file: grafana/dashboard.json
      nussknacker-lite-scenario:
        file: grafana/nussknacker-lite-scenario.json
      nussknacker-request-response-scenario:
        file: grafana/nussknacker-request-response-scenario.json
  rbac:
    create: true
    namespaced: true
    pspEnabled: false
  sidecar:
    dashboards:
      enabled: false
    datasources:
      enabled: false
  envFromSecret: "{{ .Release.Name }}-influxdb-auth"
  ingress:
    enabled: false

influxdb:
  image:
    tag: 1.8.10
  enabled: true
  config:
    http:
      auth-enabled: true
  env:
    - name: INFLUXDB_DB
      value: "nussknacker"
  setDefaultUser:
    enabled: true
    user:
      username: nussknacker
      password: changeme

telegraf:
  enabled: true
  rbac:
    create: false
  args:
    - "--config-directory"
    - "/etc/telegraf/telegraf.d"
  volumes:
    - name: telegraf-nussknacker
      configMap:
        name: "telegraf-nussknacker"
  mountPoints:
    - name: telegraf-nussknacker
      mountPath: /etc/telegraf/telegraf.d
  config:
    #We suppress default influxDB configuration from chart, as we cannot easily template influxdb url
    outputs: []

global:
  kafka:
    name: kafka
    port: 9092
  schemaRegistry:
    name: apicurio-registry
    path: /apis/ccompat/v6/

nussknackerInitContainers: [ ]

#Extra resources to deploy
extraDeploy: []
